<?php

namespace App\Http\Controllers;

use App\Models\NmapRequest;
use App\Jobs\RunNmapScan;
use App\Services\NmapScanner;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class PentestingController extends Controller
{
    protected $nmapScanner;

    /**
     * PentestingController constructor.
     *
     * @param NmapScanner $nmapScanner
     */
    public function __construct(NmapScanner $nmapScanner)
    {
        $this->middleware('auth:api');
        $this->nmapScanner = $nmapScanner;
    }

    /**
     * Initiate an Nmap scan and queue it
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse     
     */
    public function nmapScan(Request $req)
    {
        # Validate req
        // dd(Auth::user());
        $req->validate([ 'target' => 'required|string', ]);

        # Check for existing pending/processing scan for this user and target if there's no repeating
        $existingScan = NmapRequest::where('user_id', Auth::id())->where('target', $req->target)->whereIn('status', ['pending', 'processing'])->first();
        if(!isset($req->requestedfor)) {
            if ($existingScan) {
                return response()->json([ 'message' => 'A scan for this target is already in progress', 'scan_id' => $existingScan->id, ], 409);
            }
        }

        # Create new scan
        $nmapRequest = NmapRequest::create([
            'user_id' => Auth::id(),
            'target' => $req->target,
            'status' => 'pending',
        ]);

        # Dispatch the scan job
        RunNmapScan::dispatch($nmapRequest)->onQueue('scans');

        return response()->json([ 'message' => 'Scan request queued successfully', 'scan_id' => $nmapRequest->id, ], 202);
    }
}